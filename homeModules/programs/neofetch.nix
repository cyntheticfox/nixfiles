{ config, lib, pkgs, ... }:

with lib;

let
  cfg = config.programs.neofetch;
  infoModule.options = {
    subtitle = mkOption {
      type = with types; nullOr str;
      example = "Host";
      description = ''
        Subtitle to print for the section.
      '';
    };

    function = mkOption {
      type = types.str;
      example = "model";
      description = ''
        Bash function to run to print the section.
      '';
    };
  };
  mkInfoArgs = a:
    if
      builtins.isAttrs a
    then
      "\"${a.subtitle}\" ${a.function}"
    else
      a;
  mkInfoList = builtins.map (f: "info ${mkInfoArgs f}");
in
{
  options.programs.neofetch = {
    enable = mkEnableOption "Enable neofetch home-manager module.";

    package = mkPackageOption pkgs "neofetch" { };

    # See https://github.com/dylanaraps/neofetch/wiki/Config-File
    configVars = mkOption {
      type = with types; attrsOf str;
      default = { };
      example = {
        "memory_percent" = "on";
        "speed_shorthand" = "on";
      };
      description = ''
        Shell variables to set in the neofetch
        <filename>config.conf</filename> script. See
        <link xlink:href="https://github.com/dylanaraps/neofetch/wiki/Config-File"/>
        for supported values.
      '';
    };

    configBefore = mkOption {
      type = with types; lines;
      default = "";
      example = ''
        date_line () {
          prin "Date" "$(color 4)$(date)"
        }
      '';
      description = ''
        Bash shell commands to run before the primary <code>print_info()</code>
        function. Useful for defining custom output functions. See
        <link xlink:href="https://github.com/dylanaraps/neofetch/wiki/Customizing-Info#adding-custom-info"/>
        for provided helper functions.
      '';
    };

    configPrintBefore = mkOption {
      type = with types; lines;
      default = "";
      description = ''
        Bash shell commands to run before the primary <code>print_info()</code>
        function's "info" lines.
      '';
    };

    configAfter = mkOption {
      type = with types; lines;
      default = "";
      description = ''
        Bash shell commands to run after the primary <code>print_info()</code>
        function. Useful for defining additional env variables, or function
        ordering. See
        <link xlink:href="https://github.com/dylanaraps/neofetch/wiki/Customizing-Info#adding-custom-info"/>
        for provided helper functions.
      '';
    };

    configPrintAfter = mkOption {
      type = with types; lines;
      default = "";
      description = ''
        Bash shell commands to run after the primary <code>print_info()</code>
        function's "info" lines.
      '';
    };

    infoList = mkOption {
      type = with types; listOf (either str (submodule infoModule));
      default = [
        "title"
        "underline"
        { subtitle = "Host"; function = "model"; }
        { subtitle = "OS"; function = "distro"; }
        { subtitle = "Kernel"; function = "kernel"; }
        { subtitle = "Uptime"; function = "uptime"; }
        { subtitle = "Packages"; function = "packages"; }
        { subtitle = "Shell"; function = "shell"; }
        { subtitle = "Resolution"; function = "resolution"; }
        { subtitle = "DE"; function = "de"; }
        { subtitle = "WM"; function = "wm"; }
        { subtitle = "WM Theme"; function = "wm_theme"; }
        { subtitle = "Theme"; function = "theme"; }
        { subtitle = "Icons"; function = "icons"; }
        { subtitle = "Terminal"; function = "term"; }
        { subtitle = "Terminal Font"; function = "term_font"; }
        { subtitle = "CPU"; function = "cpu"; }
        { subtitle = "GPU"; function = "gpu"; }
        { subtitle = "Memory"; function = "memory"; }
        "cols"
      ];
    };
  };

  config = mkIf cfg.enable {
    home.packages = [ cfg.package ];

    xdg.configFile."neofetch/config.conf".source = pkgs.writers.writeBash "neofetch-config.conf" ''
      # Generated by [home-manager](https://github.com/nix-community/home-manager)
      ${cfg.configBefore}

      print_info () {
          ${cfg.configPrintBefore}

          ${builtins.concatStringsSep "\n" (mkInfoList cfg.infoList)}

          ${cfg.configPrintAfter}
      }

      ${cfg.configAfter}
    '';
  };
}
